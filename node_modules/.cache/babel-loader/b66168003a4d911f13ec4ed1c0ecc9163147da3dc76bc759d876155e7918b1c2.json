{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MY COMPUTER SERVICES\\\\CuriousCockatoo\\\\client\\\\src\\\\components\\\\Converter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport pb from \"../utils/pocketbaseClient\";\nimport RealWorldBox from \"./RealWorldBox\";\nimport { formatNumber } from \"../utils/formatNumber\";\nimport { useTheme } from \"../context/ThemeContext\";\n\n// ✅ Local parseScientific function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction parseScientific(value) {\n  if (!value || typeof value !== \"string\") return null;\n  if (value === \"∞\") return Infinity;\n  try {\n    return Number(value.replace(\",\", \"\"));\n  } catch {\n    return null;\n  }\n}\nfunction Converter({\n  categoryId\n}) {\n  _s();\n  const {\n    theme\n  } = useTheme();\n  const [realWorldItems, setRealWorldItems] = useState([]);\n  const [inputValue, setInputValue] = useState(1);\n  const [selectedItems, setSelectedItems] = useState([\"\", \"\", \"\"]);\n  const [displayType, setDisplayType] = useState([\"general\", \"general\", \"general\"]);\n\n  // ✅ Fetch and sort real world items\n  useEffect(() => {\n    async function fetchRealWorldItems() {\n      try {\n        var _validItems$, _validItems$2, _validItems$3;\n        const response = await pb.collection(\"real_world_items\").getFullList({\n          filter: `category = \"${categoryId}\"`\n        });\n        const sorted = response.map(item => ({\n          ...item,\n          numericValue: parseScientific(item.expression)\n        })).sort((a, b) => {\n          if (a.numericValue === Infinity && b.numericValue === Infinity) return 0;\n          if (a.numericValue === Infinity) return 1;\n          if (b.numericValue === Infinity) return -1;\n          return a.numericValue - b.numericValue;\n        });\n        setRealWorldItems(sorted);\n        const validItems = sorted.filter(item => item.numericValue !== Infinity);\n        setSelectedItems([((_validItems$ = validItems[0]) === null || _validItems$ === void 0 ? void 0 : _validItems$.id) || \"\", ((_validItems$2 = validItems[1]) === null || _validItems$2 === void 0 ? void 0 : _validItems$2.id) || \"\", ((_validItems$3 = validItems[2]) === null || _validItems$3 === void 0 ? void 0 : _validItems$3.id) || \"\"]);\n      } catch (err) {\n        console.error(\"Error loading data:\", err);\n      }\n    }\n    if (categoryId) {\n      fetchRealWorldItems();\n    }\n  }, [categoryId]);\n  const handleDropdownChange = (index, newId) => {\n    const newSelection = [...selectedItems];\n    newSelection[index] = newId;\n    setSelectedItems(newSelection);\n  };\n  const toggleDisplayType = index => {\n    const newTypes = [...displayType];\n    newTypes[index] = newTypes[index] === \"general\" ? \"scientific\" : \"general\";\n    setDisplayType(newTypes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-1 gap-4 md:grid-cols-3 w-full mt-6\",\n    children: selectedItems.map((itemId, index) => {\n      const item = realWorldItems.find(i => i.id === itemId);\n      const convertedValue = item && item.numericValue && item.numericValue !== 0 ? inputValue / item.numericValue : 0;\n      return /*#__PURE__*/_jsxDEV(RealWorldBox, {\n        allItems: realWorldItems,\n        selectedId: itemId,\n        onChange: newId => handleDropdownChange(index, newId),\n        convertedValue: displayType[index] === \"scientific\" ? item === null || item === void 0 ? void 0 : item.expression : formatNumber(convertedValue),\n        onToggle: () => toggleDisplayType(index),\n        displayType: displayType[index],\n        theme: theme,\n        note: item === null || item === void 0 ? void 0 : item.note\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(Converter, \"LxgT8hxsZYWrFYJSjNNoaaRzXbA=\", false, function () {\n  return [useTheme];\n});\n_c = Converter;\nexport default Converter;\nvar _c;\n$RefreshReg$(_c, \"Converter\");","map":{"version":3,"names":["React","useEffect","useState","pb","RealWorldBox","formatNumber","useTheme","jsxDEV","_jsxDEV","parseScientific","value","Infinity","Number","replace","Converter","categoryId","_s","theme","realWorldItems","setRealWorldItems","inputValue","setInputValue","selectedItems","setSelectedItems","displayType","setDisplayType","fetchRealWorldItems","_validItems$","_validItems$2","_validItems$3","response","collection","getFullList","filter","sorted","map","item","numericValue","expression","sort","a","b","validItems","id","err","console","error","handleDropdownChange","index","newId","newSelection","toggleDisplayType","newTypes","className","children","itemId","find","i","convertedValue","allItems","selectedId","onChange","onToggle","note","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/MY COMPUTER SERVICES/CuriousCockatoo/client/src/components/Converter.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport pb from \"../utils/pocketbaseClient\";\nimport RealWorldBox from \"./RealWorldBox\";\nimport { formatNumber } from \"../utils/formatNumber\";\nimport { useTheme } from \"../context/ThemeContext\";\n\n// ✅ Local parseScientific function\nfunction parseScientific(value) {\n  if (!value || typeof value !== \"string\") return null;\n  if (value === \"∞\") return Infinity;\n  try {\n    return Number(value.replace(\",\", \"\"));\n  } catch {\n    return null;\n  }\n}\n\nfunction Converter({ categoryId }) {\n  const { theme } = useTheme();\n  const [realWorldItems, setRealWorldItems] = useState([]);\n  const [inputValue, setInputValue] = useState(1);\n  const [selectedItems, setSelectedItems] = useState([\"\", \"\", \"\"]);\n  const [displayType, setDisplayType] = useState([\"general\", \"general\", \"general\"]);\n\n  // ✅ Fetch and sort real world items\n  useEffect(() => {\n    async function fetchRealWorldItems() {\n      try {\n        const response = await pb.collection(\"real_world_items\").getFullList({\n          filter: `category = \"${categoryId}\"`,\n        });\n\n        const sorted = response\n          .map((item) => ({\n            ...item,\n            numericValue: parseScientific(item.expression),\n          }))\n          .sort((a, b) => {\n            if (a.numericValue === Infinity && b.numericValue === Infinity) return 0;\n            if (a.numericValue === Infinity) return 1;\n            if (b.numericValue === Infinity) return -1;\n            return a.numericValue - b.numericValue;\n          });\n\n        setRealWorldItems(sorted);\n\n        const validItems = sorted.filter((item) => item.numericValue !== Infinity);\n        setSelectedItems([\n          validItems[0]?.id || \"\",\n          validItems[1]?.id || \"\",\n          validItems[2]?.id || \"\",\n        ]);\n      } catch (err) {\n        console.error(\"Error loading data:\", err);\n      }\n    }\n\n    if (categoryId) {\n      fetchRealWorldItems();\n    }\n  }, [categoryId]);\n\n  const handleDropdownChange = (index, newId) => {\n    const newSelection = [...selectedItems];\n    newSelection[index] = newId;\n    setSelectedItems(newSelection);\n  };\n\n  const toggleDisplayType = (index) => {\n    const newTypes = [...displayType];\n    newTypes[index] = newTypes[index] === \"general\" ? \"scientific\" : \"general\";\n    setDisplayType(newTypes);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3 w-full mt-6\">\n      {selectedItems.map((itemId, index) => {\n        const item = realWorldItems.find((i) => i.id === itemId);\n        const convertedValue =\n          item && item.numericValue && item.numericValue !== 0\n            ? inputValue / item.numericValue\n            : 0;\n\n        return (\n          <RealWorldBox\n            key={index}\n            allItems={realWorldItems}\n            selectedId={itemId}\n            onChange={(newId) => handleDropdownChange(index, newId)}\n            convertedValue={\n              displayType[index] === \"scientific\"\n                ? item?.expression\n                : formatNumber(convertedValue)\n            }\n            onToggle={() => toggleDisplayType(index)}\n            displayType={displayType[index]}\n            theme={theme}\n            note={item?.note}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Converter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}