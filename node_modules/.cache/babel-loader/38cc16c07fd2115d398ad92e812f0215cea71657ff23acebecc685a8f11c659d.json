{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MY COMPUTER SERVICES\\\\unit-converter-app\\\\client\\\\src\\\\components\\\\Converter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport pb from \"../utils/pocketbaseClient\";\nimport RealWorldBox from \"./RealWorldBox\";\nimport { formatNumber } from \"../utils/formatNumber\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Converter({\n  categoryId\n}) {\n  _s();\n  const [units, setUnits] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [fromUnit, setFromUnit] = useState(\"\");\n  const [selectedUnits, setSelectedUnits] = useState([]);\n  const [realWorldItems, setRealWorldItems] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([null, null, null]);\n  const [conversionToggles, setConversionToggles] = useState([false, false, false]);\n  const [comparisonToggles, setComparisonToggles] = useState([false, false, false]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        var _sortedUnits$;\n        // Fetch units filtered by category\n        const unitList = await pb.collection(\"units\").getFullList({\n          filter: `category = \"${categoryId}\"`\n        });\n        // Sort units by to_base_factor ascending\n        const sortedUnits = unitList.sort((a, b) => a.to_base_factor - b.to_base_factor);\n        setUnits(sortedUnits);\n        setFromUnit(((_sortedUnits$ = sortedUnits[0]) === null || _sortedUnits$ === void 0 ? void 0 : _sortedUnits$.id) || \"\");\n        setSelectedUnits(sortedUnits.slice(1, 4).map(u => u.id));\n\n        // Fetch real-world items with expanded unit info\n        const realItems = await pb.collection(\"realworld_items\").getFullList({\n          filter: `category = \"${categoryId}\"`,\n          expand: \"unit\"\n        });\n\n        // Sort real items, treating missing scientific_value as very large for ordering last\n        const sortedItems = realItems.sort((a, b) => {\n          const aVal = typeof a.scientific_value === \"number\" ? a.scientific_value : Number.MAX_SAFE_INTEGER;\n          const bVal = typeof b.scientific_value === \"number\" ? b.scientific_value : Number.MAX_SAFE_INTEGER;\n          return aVal - bVal;\n        });\n        setRealWorldItems(sortedItems);\n        setSelectedItems([sortedItems[0] || null, sortedItems[1] || null, sortedItems[2] || null]);\n      } catch (err) {\n        console.error(\"Fetch error:\", err);\n      }\n    };\n    if (categoryId) fetchData();\n  }, [categoryId]);\n\n  // Converts inputValue from \"fromUnit\" to the \"toUnitId\"\n  const getConvertedValue = toUnitId => {\n    const from = units.find(u => u.id === fromUnit);\n    const to = units.find(u => u.id === toUnitId);\n    if (!from || !to) return null;\n    const inputNum = parseFloat(inputValue);\n    if (isNaN(inputNum)) return null;\n    const baseValue = inputNum * from.to_base_factor;\n    return baseValue / to.to_base_factor;\n  };\n\n  // Computes comparison ratio relative to real world item's approx_value\n  const getComparisonValue = item => {\n    const from = units.find(u => u.id === fromUnit);\n    if (!from || !item) return null;\n    const approx = item.approx_value;\n    if (approx == null) return null;\n    const inputNum = parseFloat(inputValue);\n    if (isNaN(inputNum)) return null;\n    const baseValue = inputNum * from.to_base_factor;\n    return baseValue / approx;\n  };\n\n  // Toggle handlers to ensure only one toggle per index is active at a time\n  const toggleConversion = (index, state) => {\n    setConversionToggles(prev => prev.map((val, i) => i === index ? state : false));\n  };\n  const toggleComparison = (index, state) => {\n    setComparisonToggles(prev => prev.map((val, i) => i === index ? state : false));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-10\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col lg:flex-row gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full lg:w-64 flex flex-col items-center justify-center gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"font-semibold text-lg\",\n          children: \"From\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          placeholder: \"Enter value\",\n          className: \"border p-2 rounded w-full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border rounded max-h-40 overflow-y-auto w-full text-sm space-y-1\",\n          children: units.map(u => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cursor-pointer p-1 rounded hover:bg-blue-100 ${fromUnit === u.id ? \"bg-blue-200 font-medium\" : \"\"}`,\n            onClick: () => setFromUnit(u.id),\n            children: [u.name, \" (\", u.symbol, \")\"]\n          }, u.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 space-y-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-xl font-bold text-gray-700 mb-2\",\n            children: \"Conversion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-3 gap-6\",\n            children: selectedUnits.map((toUnitId, index) => {\n              const currentUnit = units.find(u => u.id === toUnitId);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-white p-4 rounded shadow flex flex-col gap-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-center gap-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `px-3 py-1 rounded-l ${!conversionToggles[index] ? \"bg-blue-600 text-white\" : \"bg-white border\"}`,\n                    onClick: () => toggleConversion(index, false),\n                    children: \"General\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `px-3 py-1 rounded-r ${conversionToggles[index] ? \"bg-blue-600 text-white\" : \"bg-white border\"}`,\n                    onClick: () => toggleConversion(index, true),\n                    children: \"Scientific\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bg-gray-100 p-3 rounded text-center text-blue-700 font-bold text-base min-h-[48px]\",\n                  children: [formatNumber(getConvertedValue(toUnitId), conversionToggles[index]), \" \", (currentUnit === null || currentUnit === void 0 ? void 0 : currentUnit.symbol) || \"\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"border rounded max-h-36 overflow-y-auto text-sm\",\n                  children: units.map(u => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `cursor-pointer p-1 hover:bg-blue-100 ${toUnitId === u.id ? \"bg-blue-200 font-medium\" : \"\"}`,\n                    onClick: () => setSelectedUnits(prev => prev.map((id, i) => i === index ? u.id : id)),\n                    children: [u.name, \" (\", u.symbol, \") -\", \" \", formatNumber(getConvertedValue(u.id), conversionToggles[index])]\n                  }, u.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-xl font-bold text-gray-700 mb-2\",\n            children: \"Comparison\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-3 gap-6\",\n            children: selectedItems.map((selectedItem, index) => {\n              var _selectedItem$expand, _selectedItem$expand$;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-white p-4 rounded shadow flex flex-col gap-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-center gap-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `px-3 py-1 rounded-l ${!comparisonToggles[index] ? \"bg-blue-600 text-white\" : \"bg-white border\"}`,\n                    onClick: () => toggleComparison(index, false),\n                    children: \"General\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `px-3 py-1 rounded-r ${comparisonToggles[index] ? \"bg-blue-600 text-white\" : \"bg-white border\"}`,\n                    onClick: () => toggleComparison(index, true),\n                    children: \"Scientific\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bg-gray-100 p-3 rounded text-center text-blue-700 font-bold text-base min-h-[48px]\",\n                  children: selectedItem && inputValue ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [formatNumber(getComparisonValue(selectedItem), comparisonToggles[index]), \" \", (selectedItem === null || selectedItem === void 0 ? void 0 : (_selectedItem$expand = selectedItem.expand) === null || _selectedItem$expand === void 0 ? void 0 : (_selectedItem$expand$ = _selectedItem$expand.unit) === null || _selectedItem$expand$ === void 0 ? void 0 : _selectedItem$expand$.symbol) || \"\"]\n                  }, void 0, true) : \"...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(RealWorldBox, {\n                  selected: selectedItem,\n                  setSelected: val => setSelectedItems(prev => prev.map((item, i) => i === index ? val : item)),\n                  items: realWorldItems,\n                  scientificToggle: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 19\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(Converter, \"x3a4qxFF3BkKhop4xpNWfuGKwiw=\");\n_c = Converter;\nexport default Converter;\nvar _c;\n$RefreshReg$(_c, \"Converter\");","map":{"version":3,"names":["React","useEffect","useState","pb","RealWorldBox","formatNumber","jsxDEV","_jsxDEV","Fragment","_Fragment","Converter","categoryId","_s","units","setUnits","inputValue","setInputValue","fromUnit","setFromUnit","selectedUnits","setSelectedUnits","realWorldItems","setRealWorldItems","selectedItems","setSelectedItems","conversionToggles","setConversionToggles","comparisonToggles","setComparisonToggles","fetchData","_sortedUnits$","unitList","collection","getFullList","filter","sortedUnits","sort","a","b","to_base_factor","id","slice","map","u","realItems","expand","sortedItems","aVal","scientific_value","Number","MAX_SAFE_INTEGER","bVal","err","console","error","getConvertedValue","toUnitId","from","find","to","inputNum","parseFloat","isNaN","baseValue","getComparisonValue","item","approx","approx_value","toggleConversion","index","state","prev","val","i","toggleComparison","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","name","symbol","currentUnit","selectedItem","_selectedItem$expand","_selectedItem$expand$","unit","selected","setSelected","items","scientificToggle","_c","$RefreshReg$"],"sources":["C:/Users/MY COMPUTER SERVICES/unit-converter-app/client/src/components/Converter.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport pb from \"../utils/pocketbaseClient\";\nimport RealWorldBox from \"./RealWorldBox\";\nimport { formatNumber } from \"../utils/formatNumber\";\n\nfunction Converter({ categoryId }) {\n  const [units, setUnits] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [fromUnit, setFromUnit] = useState(\"\");\n  const [selectedUnits, setSelectedUnits] = useState([]);\n  const [realWorldItems, setRealWorldItems] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([null, null, null]);\n  const [conversionToggles, setConversionToggles] = useState([false, false, false]);\n  const [comparisonToggles, setComparisonToggles] = useState([false, false, false]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch units filtered by category\n        const unitList = await pb.collection(\"units\").getFullList({\n          filter: `category = \"${categoryId}\"`,\n        });\n        // Sort units by to_base_factor ascending\n        const sortedUnits = unitList.sort((a, b) => a.to_base_factor - b.to_base_factor);\n        setUnits(sortedUnits);\n        setFromUnit(sortedUnits[0]?.id || \"\");\n        setSelectedUnits(sortedUnits.slice(1, 4).map((u) => u.id));\n\n        // Fetch real-world items with expanded unit info\n        const realItems = await pb.collection(\"realworld_items\").getFullList({\n          filter: `category = \"${categoryId}\"`,\n          expand: \"unit\",\n        });\n\n        // Sort real items, treating missing scientific_value as very large for ordering last\n        const sortedItems = realItems.sort((a, b) => {\n          const aVal = typeof a.scientific_value === \"number\" ? a.scientific_value : Number.MAX_SAFE_INTEGER;\n          const bVal = typeof b.scientific_value === \"number\" ? b.scientific_value : Number.MAX_SAFE_INTEGER;\n          return aVal - bVal;\n        });\n\n        setRealWorldItems(sortedItems);\n        setSelectedItems([\n          sortedItems[0] || null,\n          sortedItems[1] || null,\n          sortedItems[2] || null,\n        ]);\n      } catch (err) {\n        console.error(\"Fetch error:\", err);\n      }\n    };\n\n    if (categoryId) fetchData();\n  }, [categoryId]);\n\n  // Converts inputValue from \"fromUnit\" to the \"toUnitId\"\n  const getConvertedValue = (toUnitId) => {\n    const from = units.find((u) => u.id === fromUnit);\n    const to = units.find((u) => u.id === toUnitId);\n    if (!from || !to) return null;\n\n    const inputNum = parseFloat(inputValue);\n    if (isNaN(inputNum)) return null;\n\n    const baseValue = inputNum * from.to_base_factor;\n    return baseValue / to.to_base_factor;\n  };\n\n  // Computes comparison ratio relative to real world item's approx_value\n  const getComparisonValue = (item) => {\n    const from = units.find((u) => u.id === fromUnit);\n    if (!from || !item) return null;\n\n    const approx = item.approx_value;\n    if (approx == null) return null;\n\n    const inputNum = parseFloat(inputValue);\n    if (isNaN(inputNum)) return null;\n\n    const baseValue = inputNum * from.to_base_factor;\n    return baseValue / approx;\n  };\n\n  // Toggle handlers to ensure only one toggle per index is active at a time\n  const toggleConversion = (index, state) => {\n    setConversionToggles((prev) =>\n      prev.map((val, i) => (i === index ? state : false))\n    );\n  };\n\n  const toggleComparison = (index, state) => {\n    setComparisonToggles((prev) =>\n      prev.map((val, i) => (i === index ? state : false))\n    );\n  };\n\n  return (\n    <div className=\"space-y-10\">\n      <div className=\"flex flex-col lg:flex-row gap-6\">\n        {/* From Block */}\n        <div className=\"w-full lg:w-64 flex flex-col items-center justify-center gap-4\">\n          <label className=\"font-semibold text-lg\">From</label>\n          <input\n            type=\"number\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Enter value\"\n            className=\"border p-2 rounded w-full\"\n          />\n          <div className=\"border rounded max-h-40 overflow-y-auto w-full text-sm space-y-1\">\n            {units.map((u) => (\n              <div\n                key={u.id}\n                className={`cursor-pointer p-1 rounded hover:bg-blue-100 ${\n                  fromUnit === u.id ? \"bg-blue-200 font-medium\" : \"\"\n                }`}\n                onClick={() => setFromUnit(u.id)}\n              >\n                {u.name} ({u.symbol})\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Right Section */}\n        <div className=\"flex-1 space-y-10\">\n          {/* Conversion Section */}\n          <div>\n            <div className=\"text-center text-xl font-bold text-gray-700 mb-2\">Conversion</div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {selectedUnits.map((toUnitId, index) => {\n                const currentUnit = units.find((u) => u.id === toUnitId);\n                return (\n                  <div\n                    key={index}\n                    className=\"bg-white p-4 rounded shadow flex flex-col gap-3\"\n                  >\n                    <div className=\"flex justify-center gap-2\">\n                      <button\n                        className={`px-3 py-1 rounded-l ${\n                          !conversionToggles[index]\n                            ? \"bg-blue-600 text-white\"\n                            : \"bg-white border\"\n                        }`}\n                        onClick={() => toggleConversion(index, false)}\n                      >\n                        General\n                      </button>\n                      <button\n                        className={`px-3 py-1 rounded-r ${\n                          conversionToggles[index]\n                            ? \"bg-blue-600 text-white\"\n                            : \"bg-white border\"\n                        }`}\n                        onClick={() => toggleConversion(index, true)}\n                      >\n                        Scientific\n                      </button>\n                    </div>\n                    <div className=\"bg-gray-100 p-3 rounded text-center text-blue-700 font-bold text-base min-h-[48px]\">\n                      {formatNumber(\n                        getConvertedValue(toUnitId),\n                        conversionToggles[index]\n                      )}{\" \"}\n                      {currentUnit?.symbol || \"\"}\n                    </div>\n                    <div className=\"border rounded max-h-36 overflow-y-auto text-sm\">\n                      {units.map((u) => (\n                        <div\n                          key={u.id}\n                          className={`cursor-pointer p-1 hover:bg-blue-100 ${\n                            toUnitId === u.id ? \"bg-blue-200 font-medium\" : \"\"\n                          }`}\n                          onClick={() =>\n                            setSelectedUnits((prev) =>\n                              prev.map((id, i) => (i === index ? u.id : id))\n                            )\n                          }\n                        >\n                          {u.name} ({u.symbol}) -{\" \"}\n                          {formatNumber(getConvertedValue(u.id), conversionToggles[index])}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Comparison Section */}\n          <div>\n            <div className=\"text-center text-xl font-bold text-gray-700 mb-2\">Comparison</div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {selectedItems.map((selectedItem, index) => (\n                <div\n                  key={index}\n                  className=\"bg-white p-4 rounded shadow flex flex-col gap-3\"\n                >\n                  <div className=\"flex justify-center gap-2\">\n                    <button\n                      className={`px-3 py-1 rounded-l ${\n                        !comparisonToggles[index]\n                          ? \"bg-blue-600 text-white\"\n                          : \"bg-white border\"\n                      }`}\n                      onClick={() => toggleComparison(index, false)}\n                    >\n                      General\n                    </button>\n                    <button\n                      className={`px-3 py-1 rounded-r ${\n                        comparisonToggles[index]\n                          ? \"bg-blue-600 text-white\"\n                          : \"bg-white border\"\n                      }`}\n                      onClick={() => toggleComparison(index, true)}\n                    >\n                      Scientific\n                    </button>\n                  </div>\n                  <div className=\"bg-gray-100 p-3 rounded text-center text-blue-700 font-bold text-base min-h-[48px]\">\n                    {selectedItem && inputValue ? (\n                      <>\n                        {formatNumber(\n                          getComparisonValue(selectedItem),\n                          comparisonToggles[index]\n                        )}{\" \"}\n                        {selectedItem?.expand?.unit?.symbol || \"\"}\n                      </>\n                    ) : (\n                      \"...\"\n                    )}\n                  </div>\n                  <RealWorldBox\n                    selected={selectedItem}\n                    setSelected={(val) =>\n                      setSelectedItems((prev) =>\n                        prev.map((item, i) => (i === index ? val : item))\n                      )\n                    }\n                    items={realWorldItems}\n                    scientificToggle={true}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Converter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}