{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MY COMPUTER SERVICES\\\\unit-converter-app\\\\client\\\\src\\\\components\\\\RealWorldBox.jsx\";\n// RealWorldBox.jsx\nimport React from \"react\";\nimport { formatNumber } from \"../utils/formatNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RealWorldBox({\n  selected,\n  setSelected,\n  items = [],\n  inputValue,\n  scientific\n}) {\n  if (!Array.isArray(items)) {\n    console.error(\"RealWorldBox error: items is not an array\", items);\n    return null;\n  }\n  const sortedItems = [...items].sort((a, b) => a.scientific_value - b.scientific_value);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-y-auto max-h-[300px] space-y-3 pr-1\",\n    children: sortedItems.map(item => {\n      var _item$expand, _item$expand$unit;\n      const result = item && inputValue && item.scientific_value ? inputValue / item.scientific_value : null;\n      const isSelected = (selected === null || selected === void 0 ? void 0 : selected.id) === item.id;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setSelected === null || setSelected === void 0 ? void 0 : setSelected(item),\n        className: `cursor-pointer border p-3 rounded shadow-sm ${isSelected ? \"bg-blue-50 border-blue-400\" : \"bg-white\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font-semibold text-blue-800 text-center\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm mt-1 flex flex-col text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-lg text-blue-600 font-bold\",\n            children: formatNumber(result, scientific)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-gray-700\",\n            children: [formatNumber(item.scientific_value, true), \" (\", formatNumber(parseFloat(item.approx_value), false, true), \" \", ((_item$expand = item.expand) === null || _item$expand === void 0 ? void 0 : (_item$expand$unit = _item$expand.unit) === null || _item$expand$unit === void 0 ? void 0 : _item$expand$unit.symbol) || \"\", \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), item.notes && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs text-gray-500 italic mt-2 text-center\",\n          children: item.notes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_c = RealWorldBox;\nexport default RealWorldBox;\nvar _c;\n$RefreshReg$(_c, \"RealWorldBox\");","map":{"version":3,"names":["React","formatNumber","jsxDEV","_jsxDEV","RealWorldBox","selected","setSelected","items","inputValue","scientific","Array","isArray","console","error","sortedItems","sort","a","b","scientific_value","className","children","map","item","_item$expand","_item$expand$unit","result","isSelected","id","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","parseFloat","approx_value","expand","unit","symbol","notes","_c","$RefreshReg$"],"sources":["C:/Users/MY COMPUTER SERVICES/unit-converter-app/client/src/components/RealWorldBox.jsx"],"sourcesContent":["// RealWorldBox.jsx\nimport React from \"react\";\nimport { formatNumber } from \"../utils/formatNumber\";\n\nfunction RealWorldBox({ selected, setSelected, items = [], inputValue, scientific }) {\n  if (!Array.isArray(items)) {\n    console.error(\"RealWorldBox error: items is not an array\", items);\n    return null;\n  }\n\n  const sortedItems = [...items].sort((a, b) => a.scientific_value - b.scientific_value);\n\n  return (\n    <div className=\"overflow-y-auto max-h-[300px] space-y-3 pr-1\">\n      {sortedItems.map((item) => {\n        const result =\n          item && inputValue && item.scientific_value\n            ? inputValue / item.scientific_value\n            : null;\n\n        const isSelected = selected?.id === item.id;\n\n        return (\n          <div\n            key={item.id}\n            onClick={() => setSelected?.(item)}\n            className={`cursor-pointer border p-3 rounded shadow-sm ${\n              isSelected ? \"bg-blue-50 border-blue-400\" : \"bg-white\"\n            }`}\n          >\n            {/* Line 1: Item Name */}\n            <div className=\"font-semibold text-blue-800 text-center\">{item.name}</div>\n\n            {/* Line 2: Values */}\n            <div className=\"text-sm mt-1 flex flex-col text-center\">\n              <span className=\"text-lg text-blue-600 font-bold\">\n                {formatNumber(result, scientific)}\n              </span>\n              <span className=\"text-gray-700\">\n                {formatNumber(item.scientific_value, true)} (\n                {formatNumber(parseFloat(item.approx_value), false, true)}{\" \"}\n                {item.expand?.unit?.symbol || \"\"})\n              </span>\n            </div>\n\n            {/* Line 3: Notes (optional) */}\n            {item.notes && (\n              <div className=\"text-xs text-gray-500 italic mt-2 text-center\">{item.notes}</div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default RealWorldBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}