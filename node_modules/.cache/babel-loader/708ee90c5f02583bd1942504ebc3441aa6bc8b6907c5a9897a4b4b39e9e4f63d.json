{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MY COMPUTER SERVICES\\\\unit-converter-app\\\\client\\\\src\\\\utils\\\\formatNumber.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst superscriptMap = {\n  \"0\": \"⁰\",\n  \"1\": \"¹\",\n  \"2\": \"²\",\n  \"3\": \"³\",\n  \"4\": \"⁴\",\n  \"5\": \"⁵\",\n  \"6\": \"⁶\",\n  \"7\": \"⁷\",\n  \"8\": \"⁸\",\n  \"9\": \"⁹\",\n  \"-\": \"⁻\"\n};\nfunction toSuperscript(exp) {\n  return exp.split(\"\").map(ch => superscriptMap[ch] || ch).join(\"\");\n}\nfunction toSuperscriptString(exp) {\n  return exp.split(\"\").map(ch => superscriptMap[ch] || ch).join(\"\");\n}\n\n// JSX version - for display with superscript tag\nexport function formatNumber(value, forceScientific = false, approx = false) {\n  if (value == null || isNaN(value)) return \"...\";\n  const absVal = Math.abs(value);\n  const shouldUseScientific = forceScientific || absVal >= 1e6 || absVal < 0.001;\n  if (shouldUseScientific) {\n    const [base, expRaw] = Number(value).toExponential(2).split(\"e\");\n    const exp = expRaw.replace(\"+\", \"\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [base, \" \\xD7 10\", /*#__PURE__*/_jsxDEV(\"sup\", {\n        children: toSuperscript(exp)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true);\n  }\n  return approx ? Number(value).toLocaleString(undefined, {\n    maximumFractionDigits: 2\n  }) : Number(value).toLocaleString();\n}\n\n// String version - for dropdown options and plain text contexts\nexport function formatNumberString(value, forceScientific = false, approx = false) {\n  if (value == null || isNaN(value)) return \"...\";\n  const absVal = Math.abs(value);\n  const shouldUseScientific = forceScientific || absVal >= 1e6 || absVal < 0.001;\n  if (shouldUseScientific) {\n    const [base, expRaw] = Number(value).toExponential(2).split(\"e\");\n    const exp = expRaw.replace(\"+\", \"\");\n    return `${base} × 10${toSuperscriptString(exp)}`;\n  }\n  return approx ? Number(value).toLocaleString(undefined, {\n    maximumFractionDigits: 2\n  }) : Number(value).toLocaleString();\n}","map":{"version":3,"names":["superscriptMap","toSuperscript","exp","split","map","ch","join","toSuperscriptString","formatNumber","value","forceScientific","approx","isNaN","absVal","Math","abs","shouldUseScientific","base","expRaw","Number","toExponential","replace","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","undefined","maximumFractionDigits","formatNumberString"],"sources":["C:/Users/MY COMPUTER SERVICES/unit-converter-app/client/src/utils/formatNumber.js"],"sourcesContent":["const superscriptMap = {\n  \"0\": \"⁰\",\n  \"1\": \"¹\",\n  \"2\": \"²\",\n  \"3\": \"³\",\n  \"4\": \"⁴\",\n  \"5\": \"⁵\",\n  \"6\": \"⁶\",\n  \"7\": \"⁷\",\n  \"8\": \"⁸\",\n  \"9\": \"⁹\",\n  \"-\": \"⁻\"\n};\n\nfunction toSuperscript(exp) {\n  return exp\n    .split(\"\")\n    .map((ch) => superscriptMap[ch] || ch)\n    .join(\"\");\n}\n\nfunction toSuperscriptString(exp) {\n  return exp\n    .split(\"\")\n    .map((ch) => superscriptMap[ch] || ch)\n    .join(\"\");\n}\n\n// JSX version - for display with superscript tag\nexport function formatNumber(value, forceScientific = false, approx = false) {\n  if (value == null || isNaN(value)) return \"...\";\n\n  const absVal = Math.abs(value);\n\n  const shouldUseScientific = forceScientific || absVal >= 1e6 || absVal < 0.001;\n\n  if (shouldUseScientific) {\n    const [base, expRaw] = Number(value).toExponential(2).split(\"e\");\n    const exp = expRaw.replace(\"+\", \"\");\n    return (\n      <>\n        {base} × 10<sup>{toSuperscript(exp)}</sup>\n      </>\n    );\n  }\n\n  return approx\n    ? Number(value).toLocaleString(undefined, { maximumFractionDigits: 2 })\n    : Number(value).toLocaleString();\n}\n\n// String version - for dropdown options and plain text contexts\nexport function formatNumberString(value, forceScientific = false, approx = false) {\n  if (value == null || isNaN(value)) return \"...\";\n\n  const absVal = Math.abs(value);\n\n  const shouldUseScientific = forceScientific || absVal >= 1e6 || absVal < 0.001;\n\n  if (shouldUseScientific) {\n    const [base, expRaw] = Number(value).toExponential(2).split(\"e\");\n    const exp = expRaw.replace(\"+\", \"\");\n    return `${base} × 10${toSuperscriptString(exp)}`;\n  }\n\n  return approx\n    ? Number(value).toLocaleString(undefined, { maximumFractionDigits: 2 })\n    : Number(value).toLocaleString();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}