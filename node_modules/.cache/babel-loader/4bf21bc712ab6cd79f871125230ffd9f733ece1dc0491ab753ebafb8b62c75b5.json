{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MY COMPUTER SERVICES\\\\CuriousCockatoo\\\\client\\\\src\\\\components\\\\RealWorldBox.jsx\";\nimport React from \"react\";\nimport { formatNumber } from \"../utils/formatNumber\";\n\n// Helper to parse scientific_value safely\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction parseScientific(val) {\n  if (val == null) return null;\n  if (typeof val === \"number\") return val;\n  if (typeof val === \"object\" && \"mantissa\" in val && \"exponent\" in val) {\n    return val.mantissa * Math.pow(10, val.exponent);\n  }\n  const num = Number(val);\n  return isNaN(num) ? null : num;\n}\nfunction RealWorldBox({\n  selected,\n  setSelected,\n  items = [],\n  scientificToggle = true\n}) {\n  const safeItems = Array.isArray(items) ? items : [];\n  const sortedItems = [...safeItems].sort((a, b) => {\n    var _a$expression, _b$expression;\n    const isAInfinite = (_a$expression = a.expression) === null || _a$expression === void 0 ? void 0 : _a$expression.toLowerCase().includes(\"infin\");\n    const isBInfinite = (_b$expression = b.expression) === null || _b$expression === void 0 ? void 0 : _b$expression.toLowerCase().includes(\"infin\");\n\n    // Push items with 'infinite' expressions to the end\n    if (isAInfinite && !isBInfinite) return 1;\n    if (!isAInfinite && isBInfinite) return -1;\n    if (isAInfinite && isBInfinite) return 0;\n    const aVal = parseScientific(a.scientific_value);\n    const bVal = parseScientific(b.scientific_value);\n\n    // Items with invalid scientific values go last\n    if (aVal == null || isNaN(aVal)) return 1;\n    if (bVal == null || isNaN(bVal)) return -1;\n    return aVal - bVal;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-y-auto max-h-[300px] pr-1 flex flex-col gap-3\",\n    style: {\n      overflowX: \"hidden\"\n    },\n    children: sortedItems.map(item => {\n      var _item$expression, _item$expand, _item$expand$unit;\n      const isSelected = (selected === null || selected === void 0 ? void 0 : selected.id) === item.id;\n      const isInfinite = (_item$expression = item.expression) === null || _item$expression === void 0 ? void 0 : _item$expression.toLowerCase().includes(\"infin\");\n      const parsedScientific = parseScientific(item.scientific_value);\n      const parsedApprox = item.approx_value;\n\n      // Display Value (Scientific or Approx, fallback to expression)\n      const displayValue = item.expression ? /*#__PURE__*/_jsxDEV(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: item.expression\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : scientificToggle ? parsedScientific != null ? formatNumber(parsedScientific, true) : \"...\" : parsedApprox != null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [formatNumber(parsedApprox, false, true), \" \", (item === null || item === void 0 ? void 0 : (_item$expand = item.expand) === null || _item$expand === void 0 ? void 0 : (_item$expand$unit = _item$expand.unit) === null || _item$expand$unit === void 0 ? void 0 : _item$expand$unit.symbol) || \"\"]\n      }, void 0, true) : \"...\";\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setSelected === null || setSelected === void 0 ? void 0 : setSelected(item),\n        role: \"button\",\n        tabIndex: 0,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" || e.key === \" \") setSelected === null || setSelected === void 0 ? void 0 : setSelected(item);\n        },\n        className: `cursor-pointer border p-3 rounded shadow-sm ${isSelected ? \"bg-blue-50 border-blue-400\" : \"bg-white\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font-semibold text-blue-800 text-center\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm mt-1 flex justify-between text-blue-600 font-mono\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: isInfinite ? \"Infinite\" : parsedScientific != null ? formatNumber(parsedScientific, true) : \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: displayValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), item.notes && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prose max-w-none text-xs text-gray-500 italic mt-2 text-center\",\n          dangerouslySetInnerHTML: {\n            __html: item.notes\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_c = RealWorldBox;\nexport default RealWorldBox;\nvar _c;\n$RefreshReg$(_c, \"RealWorldBox\");","map":{"version":3,"names":["React","formatNumber","jsxDEV","_jsxDEV","Fragment","_Fragment","parseScientific","val","mantissa","Math","pow","exponent","num","Number","isNaN","RealWorldBox","selected","setSelected","items","scientificToggle","safeItems","Array","isArray","sortedItems","sort","a","b","_a$expression","_b$expression","isAInfinite","expression","toLowerCase","includes","isBInfinite","aVal","scientific_value","bVal","className","style","overflowX","children","map","item","_item$expression","_item$expand","_item$expand$unit","isSelected","id","isInfinite","parsedScientific","parsedApprox","approx_value","displayValue","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","expand","unit","symbol","onClick","role","tabIndex","onKeyDown","e","key","name","notes","_c","$RefreshReg$"],"sources":["C:/Users/MY COMPUTER SERVICES/CuriousCockatoo/client/src/components/RealWorldBox.jsx"],"sourcesContent":["import React from \"react\";\nimport { formatNumber } from \"../utils/formatNumber\";\n\n// Helper to parse scientific_value safely\nfunction parseScientific(val) {\n  if (val == null) return null;\n  if (typeof val === \"number\") return val;\n\n  if (typeof val === \"object\" && \"mantissa\" in val && \"exponent\" in val) {\n    return val.mantissa * Math.pow(10, val.exponent);\n  }\n\n  const num = Number(val);\n  return isNaN(num) ? null : num;\n}\n\nfunction RealWorldBox({ selected, setSelected, items = [], scientificToggle = true }) {\n  const safeItems = Array.isArray(items) ? items : [];\n\n  const sortedItems = [...safeItems].sort((a, b) => {\n    const isAInfinite = a.expression?.toLowerCase().includes(\"infin\");\n    const isBInfinite = b.expression?.toLowerCase().includes(\"infin\");\n\n    // Push items with 'infinite' expressions to the end\n    if (isAInfinite && !isBInfinite) return 1;\n    if (!isAInfinite && isBInfinite) return -1;\n    if (isAInfinite && isBInfinite) return 0;\n\n    const aVal = parseScientific(a.scientific_value);\n    const bVal = parseScientific(b.scientific_value);\n\n    // Items with invalid scientific values go last\n    if (aVal == null || isNaN(aVal)) return 1;\n    if (bVal == null || isNaN(bVal)) return -1;\n\n    return aVal - bVal;\n  });\n\n  return (\n    <div className=\"overflow-y-auto max-h-[300px] pr-1 flex flex-col gap-3\" style={{ overflowX: \"hidden\" }}>\n      {sortedItems.map((item) => {\n        const isSelected = selected?.id === item.id;\n        const isInfinite = item.expression?.toLowerCase().includes(\"infin\");\n        const parsedScientific = parseScientific(item.scientific_value);\n        const parsedApprox = item.approx_value;\n\n        // Display Value (Scientific or Approx, fallback to expression)\n        const displayValue = item.expression ? (\n          <span dangerouslySetInnerHTML={{ __html: item.expression }} />\n        ) : scientificToggle ? (\n          parsedScientific != null ? (\n            formatNumber(parsedScientific, true)\n          ) : (\n            \"...\"\n          )\n        ) : parsedApprox != null ? (\n          <>\n            {formatNumber(parsedApprox, false, true)} {item?.expand?.unit?.symbol || \"\"}\n          </>\n        ) : (\n          \"...\"\n        );\n\n        return (\n          <div\n            key={item.id}\n            onClick={() => setSelected?.(item)}\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" || e.key === \" \") setSelected?.(item);\n            }}\n            className={`cursor-pointer border p-3 rounded shadow-sm ${\n              isSelected ? \"bg-blue-50 border-blue-400\" : \"bg-white\"\n            }`}\n          >\n            {/* Name */}\n            <div className=\"font-semibold text-blue-800 text-center\">{item.name}</div>\n\n            {/* Values row */}\n            <div className=\"text-sm mt-1 flex justify-between text-blue-600 font-mono\">\n              {/* Scientific value (always shows if valid, else Infinite) */}\n              <span>\n                {isInfinite\n                  ? \"Infinite\"\n                  : parsedScientific != null\n                  ? formatNumber(parsedScientific, true)\n                  : \"...\"}\n              </span>\n\n              {/* Displayed Approx or Expression */}\n              <span>{displayValue}</span>\n            </div>\n\n            {/* Notes */}\n            {item.notes && (\n              <div\n                className=\"prose max-w-none text-xs text-gray-500 italic mt-2 text-center\"\n                dangerouslySetInnerHTML={{ __html: item.notes }}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default RealWorldBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}