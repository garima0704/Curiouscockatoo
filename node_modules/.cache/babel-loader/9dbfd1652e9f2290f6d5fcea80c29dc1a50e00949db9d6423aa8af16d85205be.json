{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MY COMPUTER SERVICES\\\\unit-converter-app\\\\client\\\\src\\\\utils\\\\formatNumber.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// utils/formatNumber.js\n\nconst superscriptMap = {\n  \"0\": \"⁰\",\n  \"1\": \"¹\",\n  \"2\": \"²\",\n  \"3\": \"³\",\n  \"4\": \"⁴\",\n  \"5\": \"⁵\",\n  \"6\": \"⁶\",\n  \"7\": \"⁷\",\n  \"8\": \"⁸\",\n  \"9\": \"⁹\",\n  \"-\": \"⁻\"\n};\nfunction toSuperscript(exp) {\n  return exp.split(\"\").map(ch => superscriptMap[ch] || ch).join(\"\");\n}\nexport function formatNumber(value, scientific = false, approx = false) {\n  if (value == null || isNaN(value)) return \"...\";\n  if (!scientific) {\n    // General number formatting with approx option\n    return approx ? Number(value).toLocaleString(undefined, {\n      maximumFractionDigits: 2\n    }) : Number(value).toLocaleString();\n  }\n\n  // Scientific formatting\n  const [base, expRaw] = Number(value).toExponential(2).split(\"e\");\n  const exp = expRaw.replace(\"+\", \"\"); // Remove '+' sign if any\n\n  // Return JSX string with superscript (React can render this directly)\n  // If you're using this in plain JS (non-React), you can return a string instead\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [base, \" \\xD7 10\", /*#__PURE__*/_jsxDEV(\"sup\", {\n      children: toSuperscript(exp)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"names":["superscriptMap","toSuperscript","exp","split","map","ch","join","formatNumber","value","scientific","approx","isNaN","Number","toLocaleString","undefined","maximumFractionDigits","base","expRaw","toExponential","replace","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/MY COMPUTER SERVICES/unit-converter-app/client/src/utils/formatNumber.js"],"sourcesContent":["// utils/formatNumber.js\n\nconst superscriptMap = {\n  \"0\": \"⁰\",\n  \"1\": \"¹\",\n  \"2\": \"²\",\n  \"3\": \"³\",\n  \"4\": \"⁴\",\n  \"5\": \"⁵\",\n  \"6\": \"⁶\",\n  \"7\": \"⁷\",\n  \"8\": \"⁸\",\n  \"9\": \"⁹\",\n  \"-\": \"⁻\"\n};\n\nfunction toSuperscript(exp) {\n  return exp\n    .split(\"\")\n    .map((ch) => superscriptMap[ch] || ch)\n    .join(\"\");\n}\n\nexport function formatNumber(value, scientific = false, approx = false) {\n  if (value == null || isNaN(value)) return \"...\";\n\n  if (!scientific) {\n    // General number formatting with approx option\n    return approx\n      ? Number(value).toLocaleString(undefined, { maximumFractionDigits: 2 })\n      : Number(value).toLocaleString();\n  }\n\n  // Scientific formatting\n  const [base, expRaw] = Number(value).toExponential(2).split(\"e\");\n  const exp = expRaw.replace(\"+\", \"\"); // Remove '+' sign if any\n\n  // Return JSX string with superscript (React can render this directly)\n  // If you're using this in plain JS (non-React), you can return a string instead\n  return (\n    <>\n      {base} &times; 10<sup>{toSuperscript(exp)}</sup>\n    </>\n  );\n}\n"],"mappings":";;AAAA;;AAEA,MAAMA,cAAc,GAAG;EACrB,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE;AACP,CAAC;AAED,SAASC,aAAaA,CAACC,GAAG,EAAE;EAC1B,OAAOA,GAAG,CACPC,KAAK,CAAC,EAAE,CAAC,CACTC,GAAG,CAAEC,EAAE,IAAKL,cAAc,CAACK,EAAE,CAAC,IAAIA,EAAE,CAAC,CACrCC,IAAI,CAAC,EAAE,CAAC;AACb;AAEA,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAEC,UAAU,GAAG,KAAK,EAAEC,MAAM,GAAG,KAAK,EAAE;EACtE,IAAIF,KAAK,IAAI,IAAI,IAAIG,KAAK,CAACH,KAAK,CAAC,EAAE,OAAO,KAAK;EAE/C,IAAI,CAACC,UAAU,EAAE;IACf;IACA,OAAOC,MAAM,GACTE,MAAM,CAACJ,KAAK,CAAC,CAACK,cAAc,CAACC,SAAS,EAAE;MAAEC,qBAAqB,EAAE;IAAE,CAAC,CAAC,GACrEH,MAAM,CAACJ,KAAK,CAAC,CAACK,cAAc,CAAC,CAAC;EACpC;;EAEA;EACA,MAAM,CAACG,IAAI,EAAEC,MAAM,CAAC,GAAGL,MAAM,CAACJ,KAAK,CAAC,CAACU,aAAa,CAAC,CAAC,CAAC,CAACf,KAAK,CAAC,GAAG,CAAC;EAChE,MAAMD,GAAG,GAAGe,MAAM,CAACE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;;EAErC;EACA;EACA,oBACEC,OAAA,CAAAC,SAAA;IAAAC,QAAA,GACGN,IAAI,EAAC,UAAW,eAAAI,OAAA;MAAAE,QAAA,EAAMrB,aAAa,CAACC,GAAG;IAAC;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eAChD,CAAC;AAEP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}