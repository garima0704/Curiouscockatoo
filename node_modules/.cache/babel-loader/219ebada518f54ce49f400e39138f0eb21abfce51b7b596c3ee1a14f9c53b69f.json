{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MY COMPUTER SERVICES\\\\unit-converter-app\\\\client\\\\src\\\\components\\\\RealWorldBox.jsx\";\nimport React from \"react\";\nimport { formatNumber } from \"../utils/formatNumber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RealWorldBox({\n  selected,\n  setSelected,\n  items = [],\n  scientificToggle = true\n}) {\n  const safeItems = Array.isArray(items) ? items : [];\n\n  // Helper: detect infinite items - approx_value and scientific_value are blank or zero, expression present\n  const isInfinite = item => {\n    return (!item.approx_value || item.approx_value === \"\") && (!item.scientific_value || item.scientific_value === \"\") && item.expression && item.expression.includes(\"&infin;\");\n  };\n\n  // Extract approx_value for sorting - fallback to very high number if missing or infinite\n  const getApproxValueNumber = item => {\n    // If infinite, return large number for sorting last\n    if (isInfinite(item)) return Number.POSITIVE_INFINITY;\n\n    // If approx_value is a number, return as is\n    if (typeof item.approx_value === \"number\") return item.approx_value;\n\n    // If approx_value is a string representing number, parse it\n    if (typeof item.approx_value === \"string\") {\n      // try parse float\n      const parsed = parseFloat(item.approx_value.replace(/,/g, \"\"));\n      if (!isNaN(parsed)) return parsed;\n    }\n\n    // If approx_value is an object, try to get numeric value or fallback\n    if (typeof item.approx_value === \"object\" && item.approx_value !== null) {\n      // Try to handle common \"10 to the power\" object pattern (example)\n      // e.g. { base: 10, exponent: 3 } or { mantissa: 1, exponent: 3 }\n      if (\"exponent\" in item.approx_value) {\n        const base = item.approx_value.base || 10;\n        return base ** item.approx_value.exponent;\n      }\n\n      // Fallback if unknown object structure\n      return Number.NaN;\n    }\n\n    // Default fallback\n    return Number.NaN;\n  };\n\n  // Sorting: infinite last, then by approx_value numeric ascending\n  const sortedItems = [...safeItems].sort((a, b) => {\n    const aInf = isInfinite(a);\n    const bInf = isInfinite(b);\n    if (aInf && !bInf) return 1;\n    if (!aInf && bInf) return -1;\n    const aVal = getApproxValueNumber(a);\n    const bVal = getApproxValueNumber(b);\n\n    // If either NaN, push that item last\n    if (isNaN(aVal) && !isNaN(bVal)) return 1;\n    if (!isNaN(aVal) && isNaN(bVal)) return -1;\n    if (isNaN(aVal) && isNaN(bVal)) return 0;\n    return aVal - bVal;\n  });\n\n  // Format approx_value for display (handle objects and strings)\n  const formatApproxValue = val => {\n    if (val === null || val === undefined) return \"\";\n    if (typeof val === \"number\") {\n      return formatNumber(val, false, true);\n    }\n    if (typeof val === \"string\") {\n      return val;\n    }\n    if (typeof val === \"object\") {\n      // If object, try to convert to scientific notation string, example:\n      if (\"mantissa\" in val && \"exponent\" in val) {\n        const {\n          mantissa,\n          exponent\n        } = val;\n        return `${mantissa}×10^${exponent}`;\n      }\n      if (\"base\" in val && \"exponent\" in val) {\n        return `${val.base}×10^${val.exponent}`;\n      }\n      // fallback\n      return JSON.stringify(val);\n    }\n    return String(val);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-y-auto max-h-[300px] pr-1 flex flex-col gap-3\",\n    style: {\n      overflowX: \"hidden\"\n    },\n    children: sortedItems.map(item => {\n      var _item$expand, _item$expand$unit;\n      const isSelected = (selected === null || selected === void 0 ? void 0 : selected.id) === item.id;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setSelected === null || setSelected === void 0 ? void 0 : setSelected(item),\n        role: \"button\",\n        tabIndex: 0,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" || e.key === \" \") setSelected === null || setSelected === void 0 ? void 0 : setSelected(item);\n        },\n        className: `cursor-pointer border p-3 rounded shadow-sm ${isSelected ? \"bg-blue-50 border-blue-400\" : \"bg-white\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font-semibold text-blue-800 text-center\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm mt-1 flex justify-between text-blue-600 font-mono\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.expression ? /*#__PURE__*/_jsxDEV(\"span\", {\n              dangerouslySetInnerHTML: {\n                __html: item.expression\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 19\n            }, this) : formatNumber(item.scientific_value, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.expression ? \"\" : `${formatApproxValue(item.approx_value)} ${(item === null || item === void 0 ? void 0 : (_item$expand = item.expand) === null || _item$expand === void 0 ? void 0 : (_item$expand$unit = _item$expand.unit) === null || _item$expand$unit === void 0 ? void 0 : _item$expand$unit.symbol) || \"\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), item.notes && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prose max-w-none text-xs text-gray-500 italic mt-2 text-center\",\n          dangerouslySetInnerHTML: {\n            __html: item.notes\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_c = RealWorldBox;\nexport default RealWorldBox;\nvar _c;\n$RefreshReg$(_c, \"RealWorldBox\");","map":{"version":3,"names":["React","formatNumber","jsxDEV","_jsxDEV","RealWorldBox","selected","setSelected","items","scientificToggle","safeItems","Array","isArray","isInfinite","item","approx_value","scientific_value","expression","includes","getApproxValueNumber","Number","POSITIVE_INFINITY","parsed","parseFloat","replace","isNaN","base","exponent","NaN","sortedItems","sort","a","b","aInf","bInf","aVal","bVal","formatApproxValue","val","undefined","mantissa","JSON","stringify","String","className","style","overflowX","children","map","_item$expand","_item$expand$unit","isSelected","id","onClick","role","tabIndex","onKeyDown","e","key","name","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","expand","unit","symbol","notes","_c","$RefreshReg$"],"sources":["C:/Users/MY COMPUTER SERVICES/unit-converter-app/client/src/components/RealWorldBox.jsx"],"sourcesContent":["import React from \"react\";\nimport { formatNumber } from \"../utils/formatNumber\";\n\nfunction RealWorldBox({ selected, setSelected, items = [], scientificToggle = true }) {\n  const safeItems = Array.isArray(items) ? items : [];\n\n  // Helper: detect infinite items - approx_value and scientific_value are blank or zero, expression present\n  const isInfinite = (item) => {\n    return (\n      (!item.approx_value || item.approx_value === \"\") &&\n      (!item.scientific_value || item.scientific_value === \"\") &&\n      item.expression &&\n      item.expression.includes(\"&infin;\")\n    );\n  };\n\n  // Extract approx_value for sorting - fallback to very high number if missing or infinite\n  const getApproxValueNumber = (item) => {\n    // If infinite, return large number for sorting last\n    if (isInfinite(item)) return Number.POSITIVE_INFINITY;\n\n    // If approx_value is a number, return as is\n    if (typeof item.approx_value === \"number\") return item.approx_value;\n\n    // If approx_value is a string representing number, parse it\n    if (typeof item.approx_value === \"string\") {\n      // try parse float\n      const parsed = parseFloat(item.approx_value.replace(/,/g, \"\"));\n      if (!isNaN(parsed)) return parsed;\n    }\n\n    // If approx_value is an object, try to get numeric value or fallback\n    if (typeof item.approx_value === \"object\" && item.approx_value !== null) {\n      // Try to handle common \"10 to the power\" object pattern (example)\n      // e.g. { base: 10, exponent: 3 } or { mantissa: 1, exponent: 3 }\n      if (\"exponent\" in item.approx_value) {\n        const base = item.approx_value.base || 10;\n        return base ** item.approx_value.exponent;\n      }\n\n      // Fallback if unknown object structure\n      return Number.NaN;\n    }\n\n    // Default fallback\n    return Number.NaN;\n  };\n\n  // Sorting: infinite last, then by approx_value numeric ascending\n  const sortedItems = [...safeItems].sort((a, b) => {\n    const aInf = isInfinite(a);\n    const bInf = isInfinite(b);\n    if (aInf && !bInf) return 1;\n    if (!aInf && bInf) return -1;\n\n    const aVal = getApproxValueNumber(a);\n    const bVal = getApproxValueNumber(b);\n\n    // If either NaN, push that item last\n    if (isNaN(aVal) && !isNaN(bVal)) return 1;\n    if (!isNaN(aVal) && isNaN(bVal)) return -1;\n    if (isNaN(aVal) && isNaN(bVal)) return 0;\n\n    return aVal - bVal;\n  });\n\n  // Format approx_value for display (handle objects and strings)\n  const formatApproxValue = (val) => {\n    if (val === null || val === undefined) return \"\";\n\n    if (typeof val === \"number\") {\n      return formatNumber(val, false, true);\n    }\n\n    if (typeof val === \"string\") {\n      return val;\n    }\n\n    if (typeof val === \"object\") {\n      // If object, try to convert to scientific notation string, example:\n      if (\"mantissa\" in val && \"exponent\" in val) {\n        const { mantissa, exponent } = val;\n        return `${mantissa}×10^${exponent}`;\n      }\n      if (\"base\" in val && \"exponent\" in val) {\n        return `${val.base}×10^${val.exponent}`;\n      }\n      // fallback\n      return JSON.stringify(val);\n    }\n\n    return String(val);\n  };\n\n  return (\n    <div\n      className=\"overflow-y-auto max-h-[300px] pr-1 flex flex-col gap-3\"\n      style={{ overflowX: \"hidden\" }}\n    >\n      {sortedItems.map((item) => {\n        const isSelected = selected?.id === item.id;\n\n        return (\n          <div\n            key={item.id}\n            onClick={() => setSelected?.(item)}\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" || e.key === \" \") setSelected?.(item);\n            }}\n            className={`cursor-pointer border p-3 rounded shadow-sm ${\n              isSelected ? \"bg-blue-50 border-blue-400\" : \"bg-white\"\n            }`}\n          >\n            {/* Row 1: Item Name */}\n            <div className=\"font-semibold text-blue-800 text-center\">{item.name}</div>\n\n            {/* Row 2: Show expression OR scientific and approx */}\n            <div className=\"text-sm mt-1 flex justify-between text-blue-600 font-mono\">\n              <span>\n                {item.expression ? (\n                  <span dangerouslySetInnerHTML={{ __html: item.expression }} />\n                ) : (\n                  formatNumber(item.scientific_value, true)\n                )}\n              </span>\n              <span>\n                {item.expression\n                  ? \"\"\n                  : `${formatApproxValue(item.approx_value)} ${item?.expand?.unit?.symbol || \"\"}`}\n              </span>\n            </div>\n\n            {/* Row 3: Notes (rich text) */}\n            {item.notes && (\n              <div\n                className=\"prose max-w-none text-xs text-gray-500 italic mt-2 text-center\"\n                dangerouslySetInnerHTML={{ __html: item.notes }}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default RealWorldBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}